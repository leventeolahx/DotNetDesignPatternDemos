Section 2: Builder
9. Gamma Categorization
- creational patterns: 
    - deal with creation (constructor)
    - explicit (ctor) vs implicit (DI, reflection, etc.)
    - wholesale vs piecewise 
- structural patterns
    - concerned with the structure (e.g. class members)
    - many patterns are wrappers (mimic class' interface)
    - importance of a good API design
- behavioral patterns
    - they are all different
    - they are unique

10. Overview
- Builder - When piecewise object construction is complicated, provide an API for doing it succinctly

11. Life Without Builder
- c# has a build in stringBuilder
- present how we use stringBuilder with Html, but for html we could write a better one instead of stringBuilder

12. Builder
- we are going to create an HTML builder so all the string that we created in the previous section is more understandable 
- crate and HTMLElement class
- add fields, constructors and methods
- create a ToStringImpl recursive method to implement printing

- create HTMLBuilder class
- add constructor, addChildMethod and ToSting() and Clear()
- simply create an instance of HTMLBuilder and add children and write it to the console

13. Fluent Builder
- fluent interface allow us to chain several calls by return the reference to the object

14. Fluent Builder Inheritance with Recursive Generics
- create a Person class and a PersonInfoBuilder and add a Called fluent build method
- so far there is no issue, but we are going to create a PersonJobBuilder which inherits from PersonInfoBuilder
- add a fluent interface method WorkAsA()

- instantiate a PersonJobBuilder in main and use the Called method after that you will not be able to use WorksAsA method with chaining
- the reason for this is when you call 'Called' method that returns an PersonInfoBuilder but this know nothing about WorkAsA in PersonJobBuilder class

- to resolve this we are going to create an abstract class PersonBuilder and create a Build method and return the person
- make PersonInfoBuilder as Generic (SELF)
- inherit from PersonBuilder and add restriction
- where SELF inherits from PersonInfoBuilder<SELF>
- add self to 'Called' method and return SELF type

- PersonJobBuilder<SELF>: PersonInfoBuilder<PersonJobBuilder<SELF>> where SELF : PersonJobBuilder<SELF> 

- add Builder class inside Person and instantiate it

15. Functional Builder
- create a Person (normal) and a PersonBuilder (sealed) class
- sealed means that can be inherited from it
- add a private list of function and an AddAction method, return the class to can use it in fluent
- add Do public method which set AddAction. Also add Called method which sets Do method
- add a Build method and Aggregate all actions

- if you want to add extension methods to the builder and keep the open-close principle just create a new class PersonBuilderExtension
- create a function inside it which returns a PersonBuilder and ad param PersonBuilder and the position for second param
- call builder.Do to set the position

- we are going to generalize the PersonBuilder class
- create a FunctionalBuilder class which has the <TSubject, TSelf>

- create a PersonBuilder which inherits from FunctionalBuilder<Person, PersonBuilder>

16. Faceted Builder
- create a Person class
- create a PersonBuilder. this builder  is a facade for other builders so doesn't build up person itself
- keeps a reference to the person that's being built up that's one thing
- and second thing is it allows you access to those sub builders if you will
- create a person reference

- create a PersonJobBuilder and inherit from PersonBuilder
- create a constructor with person param. Assign person to person (inherit)
- add a PersonJobBuilder fluent interface methods

- add Works variable typeOf PersonJobBuilder to PersonBuilder and you can 
- instantiate a PersonBuilder in the main method and you can use Works and method's of Works
- Works: PersonJobBuilder - is a faces, we are going to create another facet: Lives
- create the same structure for Address (Lives)
- use can use Lives on the pb instance

- you can chain Lives and Works as all fluent interface methods return PersonBuilder. PersonBuilder has these fields.
- side effect: you can e.g. chain Lives.Lives.Lives forever

- create 'public static implicit operator Person(PersonBuilder pb)' and return person

Coding Exercise 1: Builder Coding Exercise

17. Summary
- builder is a separate component whose purpose is to build up a particular object
- can either give builder a constructor or return it via a static function
- to make fluent, return this
- different facets of an object can be built with different builders working in tandem via a base class