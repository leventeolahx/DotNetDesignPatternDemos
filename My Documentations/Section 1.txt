Section 0: undefined
1. Introduction


Section 1: The SOLID Design Principles
2. Overview
- Agile Principles, Patterns, and Practices in C#

3. Single Responsibility Principle
- a typical class is responsible for one thing and has one reason to change
- create a journal class to store the items, and create a persistence class for saving the items

4. Open-Closed Principle
- create a product class
- create a product filter class
- add filter methods be size and by color
- add a new method filterBySizeAndColor -> this breaks the open close principle 

- open close principle says that classes should be open for extension
- but they should be closed for modifications
- we are going to resolve this with interfaces

- create ISpecification and IFilter interfaces
- create ColorSpecification class which inherits from ISpecification and implement IsSatisfied method
- create a BetterFilter class which inherits from IFilter and implement the interface. Loop through the items and check the IsSatisfied method
- create SizeSpecification class the same way we did for ColorSpecification
- create a generic AndSpecification  which inherits from ISpecification
- create constructor with two params and check in the IsSatisfied method: first.IsSatisfied && second.IsSatisfied

5. Liskov Substitution Principle
- create a Rectangle class and add width and height
- create a Square class and inherit from Rectangle class. add props width and height with 'new' keyword
- if you create a square object which is a rectangle reference then the height will be 0: Rectangle sq = new Square(4);

- Liskov Substitution Principle basically says that you should always be able to sor of upcast to a base type
- and the operation should be generally OK.
- this means that a square should behave a square even when we are getting a reference to a rectangle
- a fix for this is to use the virtual keyword for Rectangle class properties
- and instead of new in the child object to use 'override'

6. Interface Segregation Principle
- the interfaces should be segregated so that nobody who implements the interface has to implement functions which they don't need

- create a Document class and IMachine interface. Add print, scan, fax methods to the interface
- create a MultifunctionPrinter which inherits from IMachine. So far everything is good.
- create an OldFashionedPrinter which inherits from IMachine. Fax is not supported here.

- solution is to create more smaller and more specific interfaces 
- or create a higher level interface which inherits from other interfaces

- create MultiFunctionalMachine and generate constructor, Print and Scan methods
- delegate print to printer and scan to scanner interface
- it's a decorator pattern

7. Dependency Inversion Principle
- high level parts of the system should not depend on some low level part of the system directly instead of some kind of abstraction
- create a relationship enum and a Person class
- create a low-level class Relationship and AddParentAndChild method
- create a Main method and add persons to the Relationship.AddParentAndChild list
- if you want to access all the relationship information in the class relationship. you can do it by exposing the private field as public
- add valueTuple nuget package

- the problem with this is that we accessing a very low level part of the Relationship class, we area accessing our data-store
- because of this Relationship class cannot change the way how to store the data
- and can not longer really change in term of storing data
- a better way which would allow relationship to change how to store data to provide a form of abstraction (interfaces)
- define an interface IRelationshipBrowser with a FindAllChildren method
- implement the interface method in Relationship class

8. Summary