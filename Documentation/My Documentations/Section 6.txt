41. Overview
- getting the interface you want from the interface you have
- it's like the electrical devices adapters
- a constructor which adapts an existing interface X to conform to the required interface Y

42. Vector/Raster Demo
- create a class Point and create a static a static DrawPoint method
- create a class Line, VectorObject, Rectangle
- create a static vectorObjects (suppose we get it from another api)
- create a LineToPointAdapter class
- create the constructor and convert Line to Points collection
- call it in the Main method

43. Adapter Caching
- add a static Dictionary cache
- generate Equals method for Line and Point classes
- generate GetHashCode for both classes
- get the hashCode of the line, and if the cache already contains the hash code we return it as we already have it
- create a point list and and add the new point to the list every time. At the end of the constructor add the points to the cache
- change LineToPointAdapter to inherit from IEnumerator and implement GetEnumerator methods
- return the points

44. Generic Value Adapter
- we adapt a literal Value to a type
- create an interface IInteger
- create a class Two which inherits from IInteger, also a class for Three
- create a class Vector<T, D>: where D: IInteger, new()
- create te constructor and set the data:  data = new T[new D().Value];
- create a Vector2i class and inherit from Vector<int, Two>
- add this and X getter and setter to Vector class
- add a new constructor Vector(params T[] values)
- create a class VectorOfInt: Vector<int, D>: where D: IInteger, new()
- create two constructors and an operator+ static method
- change Vector2i to  public class Vector2i : VectorOfInt<Dimensions.Two>
- create a Vector3f: VectorOfFloat. also create VectorOfFloat(see VectorOfInt)

- create a Create method in Vector class
- instead of return a T class return TSelf
- add TSelf to to Vector -> where TSelf: Vector<TSelf, T, D>, new()
- we have to adjust VectorOfFloat to support Recursive generics
- add TSelf to VectorOfFloat

45. Adapter in Dependency Injection
- add interface ICommand and class SaveFile and OpenCommand
- create a Button class, with constructor an click method
- create a builder: var b = new ContainerBuilder();
- create a class Editor with buttons an ClickAll method
- register Button and Editor
- build the builder and Resolve<Editor>
- tell autofac that we want to use the register as an adapter:  b.RegisterAdapter<ICommand, Button>(cmd => new Button(cmd, ""));
- add a PrintMe method to Button class
- we added metadata support:  b.RegisterAdapter<Meta<ICommand>, Button>(cmd => new Button(cmd.Value, (string)cmd.Metadata["Name"]));

Coding Exercise 5: Adapter Coding Exercise

46. Summary
- determine the api you have and the api you need
- create a component which aggregates the adapter
- intermediate representations can pile up: use caching and other optimizations
